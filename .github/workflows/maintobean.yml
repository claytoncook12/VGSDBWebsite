name: Github CI/CD To AWS
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Create env file
      run: |
        touch DjangoApp/.env
        echo "# Set environment variables" >> DjangoApp/.env
        echo "SECRET_KEY = ${{ secrets.SECRET_KEY }}" >> DjangoApp/.env
        echo "DEBUG = ${{ secrets.DEBUG }}" >> DjangoApp/.env
        echo "ALLOWED_HOSTS = ${{ secrets.ALLOWED_HOSTS }}" >> DjangoApp/.env
    - name:   Install dependencies
      working-directory: ./DjangoApp #Run Tests in DjangApp folder
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      working-directory: ./DjangoApp #Run Tests in DjangApp folder
      run: |
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      working-directory: ./DjangoApp #Run Tests in DjangApp folder
      run: |
        pytest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Latest Repo
        uses: actions/checkout@master
      
      - name: Create env file
        run: |
          touch DjangoApp/.env
          echo "# Set environment variables" >> DjangoApp/.env
          echo "SECRET_KEY = ${{ secrets.SECRET_KEY }}" >> DjangoApp/.env
          echo "DEBUG = ${{ secrets.DEBUG }}" >> DjangoApp/.env
          echo "ALLOWED_HOSTS = ${{ secrets.ALLOWED_HOSTS }}" >> DjangoApp/.env
      
      # Zip All Files to deploy to AWS
      - name: Generate Deployment Package
        working-directory: ./DjangoApp #Only Need Files In DjangoApp Folder
        run: zip -r deploy.zip . -x '*.git*'
      
      # Get Timestamp to add to docker image
      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time
        
      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'
      
      # Deploy to AWS ElasticBeanStalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: Prod
          environment_name: Prod-env
          version_label: "djangobeantest-${{ steps.format-time.outputs.replaced }}"
          region: us-east-1
          wait_for_environment_recovery: 60
          deployment_package: DjangoApp/deploy.zip
